#!/opt/puppetlabs/puppet/bin/ruby
# frozen_string_literal: true

require 'json'
require 'open3'

# Cross-platform Ruby task for executing Ansible role
# Generated by puppet-ansible-converter

def main
  # Read parameters from stdin (Puppet task input_method: stdin)
  input = JSON.parse(STDIN.read)

  # Determine vardir location (agent-side)
  vardir = determine_vardir

  # Detect actual playbook path (handles collection structure)
  playbook_path = detect_playbook_path(vardir)

  unless File.exist?(playbook_path)
    fail_task("Playbook not found: #{playbook_path}")
  end

  # Build ansible-playbook command with extra-vars
  extra_vars = build_extra_vars(input)
  cmd = ['ansible-playbook', playbook_path, '-c', 'local']
  cmd += ['-e', extra_vars] unless extra_vars.empty?

  # Execute ansible-playbook
  stdout, stderr, status = Open3.capture3(*cmd)

  if status.success?
    success_result(stdout, playbook_path)
  else
    fail_task("ansible-playbook failed: #{stderr}", stdout, stderr)
  end
rescue StandardError => e
  fail_task("Task execution error: #{e.message}\n#{e.backtrace.join("\n")}")
end

def determine_vardir
  # Try to get vardir from Puppet facts (most reliable)
  if ENV['PT__installdir']
    # Task is running via Puppet, use install dir
    return File.join(ENV['PT__installdir'], 'lib', 'puppet_x')
  end

  # Fallback: common agent paths
  if File.directory?('/opt/puppetlabs/puppet/cache')
    '/opt/puppetlabs/puppet/cache'
  elsif File.directory?('C:/ProgramData/PuppetLabs/puppet/cache')
    'C:/ProgramData/PuppetLabs/puppet/cache'
  else
    '/var/lib/puppet'
  end
end

def detect_playbook_path(vardir)
  # Strip prefix from module name to get ansible source name
  ansible_name = 'ansible_role_ruby'

  # Try collection structure first: roles/<role>/playbook.yml
  collection_path = File.join(vardir, 'lib', 'puppet_x', 'ansible_modules', ansible_name, 'roles', ansible_name, 'playbook.yml')
  return collection_path if File.exist?(collection_path)

  # Try standalone role: playbook.yml
  standalone_path = File.join(vardir, 'lib', 'puppet_x', 'ansible_modules', ansible_name, 'playbook.yml')
  return standalone_path if File.exist?(standalone_path)

  # Return most likely path
  standalone_path
end

def build_extra_vars(input)
  # Convert input parameters to Ansible extra-vars JSON
  return '' if input.nil? || input.empty?

  # Filter out nil values (optional parameters not provided)
  vars = input.reject { |_k, v| v.nil? }
  return '' if vars.empty?

  JSON.generate(vars)
end

def success_result(output, playbook_path)
  result = {
    status: 'success',
    playbook: playbook_path,
    output: output
  }
  puts JSON.generate(result)
  exit 0
end

def fail_task(message, stdout = '', stderr = '')
  result = {
    status: 'failure',
    _error: {
      msg: message,
      kind: 'puppet-ansible-converter/ansible-execution-error',
      details: {
        stdout: stdout,
        stderr: stderr
      }
    }
  }
  puts JSON.generate(result)
  exit 1
end

# Run the task
main if __FILE__ == $PROGRAM_NAME
